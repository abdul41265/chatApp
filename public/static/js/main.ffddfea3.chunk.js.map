{"version":3,"sources":["assets/cancel.jpg","data/en-CA.js","data/fr-CA.js","store/TranslationStore.js","store/AuthenticationStore.js","store/MessageStore.js","utils/index.js","components/Notify/index.js","components/Notify/Notify.js","components/Authentication/Login.js","components/Authentication/Register.js","services/Service.js","services/AuthenticationService.js","services/UserSearchService.js","services/MessageService.js","components/Authentication/index.js","components/Avatar/index.js","components/Avatar/Avatar.js","components/Home/Home.js","components/UserCard/index.js","components/UserCard/UserCard.js","components/MessageCard/index.js","components/MessageCard/MessageCard.js","components/Home/index.js","Routes.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","en_CA","home","logout","typeMessagePlaceholder","searchPlaceholder","login","email","password","enterEmail","submit","gotoRegistration","register","firstName","lastName","gotoLogin","fr_CA","TranslationStore","_class","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","createClass","key","value","type","section","missingTranslation","concat","translation","sectionName","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","en-CA","enCA","fr-CA","frCA","action","getOwnPropertyDescriptor","AuthenticationStore","AuthenticationStore_class","AuthenticationStore_descriptor","AuthenticationStore_descriptor2","_descriptor3","_descriptor4","_descriptor5","nonObservableToken","cookies","Cookies","cookieToken","get","token","id","user","set","path","maxAge","process","remove","MessageStore","MessageStore_class","MessageStore_descriptor","messages","min","max","Math","ceil","random","component","inject","observer","props","Notify","Utils","decorateWithMobX","react_default","a","createElement","Message","style","visibility","show","compact","className","floating","content","message","Container","components_Notify","showNotify","Row","Col","md","Form","onSubmit","Group","controlId","Label","getTranslation","Control","placeholder","Button","loading","formSubmitted","primary","Text","href","Service","_ref","method","url","data","options","headers","authorization","axios","_ref2","request","_ref3","AuthenticationService","_Service","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","form","elements","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","err","return","formData","parseFormData","post","UserSearchService","_search","asyncToGenerator","regenerator_default","mark","_callee","searchTerm","response","hits","result","wrap","_context","prev","query","bool","should","match_phrase_prefix","sent","body","map","_source","abrupt","stop","_x","_x2","MessageService","_getConversation","convoWith","page","limit","_x3","_x4","Authentication","_this","call","state","callback","_this2","setState","notificationTimeout","setTimeout","clearTimeout","authentication","storeAuthentication","showNotification","_this3","history","push","event","_this4","preventDefault","target","_callee2","_context2","authenticate","t0","Register","bind","Login","Component","withRouter","Avatar","size","firstLetter","recipient","selectedUsers","onLogout","onSendMessage","components_Avatar","toUpperCase","Dropdown","labeled","button","icon","Menu","Item","onClick","text","xs","onSearchChange","onUserSearch","onChange","onUserDropdownOptionSelect","fluid","search","selection","userDropdownOptions","userSearchLoading","onScroll","onMessageScroll","Loader","active","loaderActive","Input","onKeyDown","UserCard","name","length","substring","backgroundColor","selected","unseenMessages","stopPropagation","onCloseUserCard","src","require","MessageCard","ref","messageRef","left","username","timestamp","HomeContainer","currentPage","unseenMessagesMap","attachSocketIOHandler","_window$location","window","location","protocol","hostname","port","host","parseInt","socket","socketIOClient","on","messageResponse","to","from","toConsumableArray","components_MessageCard","moment","createdDate","format","right","setMessagesState","forceUpdate","refreshAuthentication","status","yCoordinate","scrollTop","scrollHeight","allMessagesRetrieved","messagesResponse","getConversation","unseenItems","items","_objectSpread","stateMessages","i","React","createRef","current","scrollIntoView","currentTarget","_callee3","results","_context3","forEach","states","setMessages","otherOptions","_this5","_this6","_callee6","_context6","sendMessage","_context7","_this7","_this$props$authentic","Home","keys","components_UserCard","onUserClick","react_router","components_Authentication","components_Home","Boolean","match","ReactDOM","render","react_router_dom","mobx_react_module","Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffddfea3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancel.fbd28b8b.jpg\";","export default {\r\n    home: {\r\n        logout: 'Logout',\r\n        typeMessagePlaceholder: 'Type a message',\r\n        searchPlaceholder: 'Search...',\r\n    },\r\n    login: {\r\n        email: 'Email',\r\n        password: 'Password',\r\n        enterEmail: 'Enter Email',\r\n        submit: 'Submit',\r\n        gotoRegistration: 'Create an Account',\r\n    },\r\n    register: {\r\n        firstName: 'First Name',\r\n        lastName: 'Last Name',\r\n        gotoLogin: 'Already have an account? Sign in',\r\n    },\r\n};\r\n","export default {};\r\n","import {\r\n    observable,\r\n    action,\r\n} from 'mobx';\r\n\r\nimport enCA from '../data/en-CA';\r\nimport frCA from '../data/fr-CA';\r\n\r\nexport class TranslationStore {\r\n    @observable type = 'en-CA';\r\n    @observable translation = {\r\n        'en-CA': enCA,\r\n        'fr-CA': frCA,\r\n    };\r\n\r\n    @action changeTranslations (type) {\r\n        this.type = type;\r\n    }\r\n\r\n    getTranslation (section, key) {\r\n        let missingTranslation = key ? `?${section}-${key}?` : `?${section}?`;\r\n        if (section && key && this.translation[this.type] && this.translation[this.type][section] && this.translation[this.type][section][key]) {\r\n            const translation = this.translation[this.type][section][key];\r\n            if (typeof translation === 'string') {\r\n                return translation;\r\n            }\r\n        } else if (section && key) {\r\n            return missingTranslation;\r\n        } else if (section) {\r\n            key = section;\r\n            const translation = this.translation[this.type][key];\r\n            if (translation && typeof translation === 'string') {\r\n                return translation;\r\n            }\r\n            for (const sectionName in this.translation[this.type]) {\r\n                const section = this.translation[this.type][sectionName];\r\n                if (typeof section === 'object' && key in section && typeof section[key] === 'string') {\r\n                    return section[key];\r\n                }\r\n            }\r\n        }\r\n        return missingTranslation;\r\n    }\r\n}\r\n","import {\r\n    observable,\r\n    action,\r\n} from 'mobx';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nexport class AuthenticationStore {\r\n    // If any component's render depends on this attribute, then the component will instantly re-render.\r\n    @observable id = null;\r\n    @observable email = null;\r\n    @observable token = null;\r\n    @observable firstName = null;\r\n    @observable lastName = null;\r\n    // This variable is not reactive, meaning anything in render depending on this\r\n    // attribute will not cause instant re-render.\r\n    nonObservableToken = null;\r\n    cookies = null;\r\n\r\n    constructor () {\r\n        this.cookies = new Cookies();\r\n        const cookieToken = this.cookies.get('token');\r\n        this.token = cookieToken;\r\n        this.nonObservableToken = cookieToken;\r\n        this.id = this.cookies.get('id');\r\n        this.email = this.cookies.get('email');\r\n        this.firstName = this.cookies.get('firstName');\r\n        this.lastName = this.cookies.get('lastName');\r\n    }\r\n\r\n    @action storeAuthentication (user) {\r\n        this.nonObservableToken = user.token;\r\n        for (const key in user) {\r\n            this[key] = user[key];\r\n            this.cookies.set(key, user[key], {\r\n                path: '/',\r\n                maxAge: process.env.REACT_APP_COOKIE_MAX_AGE || 18000,\r\n            });\r\n        }\r\n    }\r\n\r\n    @action refreshAuthentication () {\r\n        this.token = null;\r\n        this.cookies.remove('token');\r\n        this.id = null;\r\n        this.cookies.remove('id');\r\n        this.email = null;\r\n        this.cookies.remove('email');\r\n        this.firstName = null;\r\n        this.cookies.remove('firstName');\r\n        this.lastName = null;\r\n        this.cookies.remove('lastName');\r\n    }\r\n}\r\n","import {\r\n    observable,\r\n    action,\r\n} from 'mobx';\r\n\r\n/**\r\n * This store serves as a cache for the message requests that\r\n * have been already retrieved from the server.\r\n */\r\nexport class MessageStore {\r\n    // Keys of this object will be user email and values will be array of message objects.\r\n    @observable messages = {}\r\n\r\n    @action storeMessage (messages) {\r\n        this.messages = messages;\r\n    }\r\n}\r\n","import {\r\n    inject,\r\n    observer,\r\n} from 'mobx-react';\r\n\r\nexport default class {\r\n    static getRandomNumber (min, max) {\r\n        return Math.ceil(Math.random() * (max + 1 - min));\r\n    }\r\n\r\n    static decorateWithMobX (component) {\r\n        return inject('message', 'authentication', 'translation')(observer(props => component(props)));\r\n    }\r\n}\r\n","import Notify from './Notify';\r\n\r\nexport default Notify;\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    return (\r\n        <Message style = {{\r\n            visibility: props.show ? 'visible' : 'hidden',\r\n        }} compact className = 'notify' floating content = {props.message} />\r\n    );\r\n});\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Container, Col, Row, Form } from 'react-bootstrap';\r\nimport { Button } from 'semantic-ui-react';\r\nimport Notify from '../Notify';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const { translation } = props;\r\n    return (\r\n        <Container>\r\n            <Notify\r\n                show = {props.showNotify}\r\n                message = {props.message}\r\n            />\r\n            <Row className = 'justify-content-md-center login-container'>\r\n                <Col md = {4}>\r\n                    <Form onSubmit = {props.onSubmit}>\r\n                        <Form.Group controlId = 'email'>\r\n                            <Form.Label>{translation.getTranslation('email')}</Form.Label>\r\n                            <Form.Control type = 'email' placeholder = {translation.getTranslation('enterEmail')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'password'>\r\n                            <Form.Label>{translation.getTranslation('password')}</Form.Label>\r\n                            <Form.Control type = 'password' placeholder = {translation.getTranslation('password')} />\r\n                        </Form.Group>\r\n                        <Button type = 'submit' loading = {props.formSubmitted} primary>\r\n                            {translation.getTranslation('submit')}\r\n                        </Button>\r\n                        <Form.Text className=\"text-muted authentication-link\">\r\n                            <a href='/register'>{translation.getTranslation('gotoRegistration')}</a>\r\n                        </Form.Text>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Container, Col, Row, Form } from 'react-bootstrap';\r\nimport { Button } from 'semantic-ui-react';\r\nimport Notify from '../Notify';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const { translation } = props;\r\n    return (\r\n        <Container>\r\n            <Notify\r\n                show = {props.showNotify}\r\n                message = {props.message}\r\n            />\r\n            <Row className = 'justify-content-md-center register-container'>\r\n                <Col md = {4}>\r\n                    <Form onSubmit = {props.onSubmit}>\r\n                        <Form.Group controlId = 'email'>\r\n                            <Form.Label>{translation.getTranslation('email')}</Form.Label>\r\n                            <Form.Control type = 'email' placeholder = {translation.getTranslation('enterEmail')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'password'>\r\n                            <Form.Label>{translation.getTranslation('password')}</Form.Label>\r\n                            <Form.Control type = 'password' placeholder = {translation.getTranslation('password')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'firstName'>\r\n                            <Form.Label>{translation.getTranslation('firstName')}</Form.Label>\r\n                            <Form.Control type = 'text' placeholder = {translation.getTranslation('firstName')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'lastName'>\r\n                            <Form.Label>{translation.getTranslation('lastName')}</Form.Label>\r\n                            <Form.Control type = 'text' placeholder = {translation.getTranslation('lastName')} />\r\n                        </Form.Group>\r\n                        <Button type = 'submit' loading = {props.formSubmitted} primary>\r\n                            {translation.getTranslation('submit')}\r\n                        </Button>\r\n                        <Form.Text className=\"text-muted authentication-link\">\r\n                            <a href='/login'>{translation.getTranslation('gotoLogin')}</a>\r\n                        </Form.Text>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","import axios from 'axios';\r\n\r\nexport class Service {\r\n    static request ({ method, url, data, token }) {\r\n        const options = {\r\n            method,\r\n            url: `${process.env.REACT_APP_REST_API_ENDPOINT || ''}/${url}`,\r\n        };\r\n        if (token) {\r\n            options.headers = { 'authorization': `Bearer ${token}` };\r\n        }\r\n        if (data) {\r\n            options.data = data;\r\n        }\r\n        return axios(options);\r\n    }\r\n    static post ({ url, data, token }) {\r\n        return this.request({ method: 'POST', url, data, token });\r\n    }\r\n    static get ({ url, data, token }) {\r\n        return this.request({ method: 'GET', url, data, token });\r\n    }\r\n}\r\n","import { Service } from './Service';\r\n\r\nexport class AuthenticationService extends Service {\r\n    static parseFormData (form) {\r\n        const { elements } = form;\r\n        const data = {};\r\n        for (const element of elements) {\r\n            const { id, value } = element;\r\n            if (id) {\r\n                data[id] = value;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    static login (form) {\r\n        const formData = this.parseFormData(form);\r\n        return this.post({ url: `login`, data: formData });\r\n    }\r\n\r\n    static register (form) {\r\n        const formData = this.parseFormData(form);\r\n        return this.post({ url: `register`, data: formData });\r\n    }\r\n\r\n    static logout (token) {\r\n        return this.post({ url: 'logout', token });\r\n    }\r\n};\r\n","import { Service } from './Service';\r\n\r\nexport class UserSearchService extends Service {\r\n    static async search (searchTerm, token) {\r\n        const options = {\r\n            url: `api/search/user`,\r\n            token,\r\n            data: {\r\n                'query': {\r\n                    'bool': {\r\n                        'should': [\r\n                            // match_phrase prefix returns documents that contain the words of a provided text, in the same order as provided.\r\n                            { 'match_phrase_prefix': { 'firstName': searchTerm } },\r\n                            { 'match_phrase_prefix': { 'lastName': searchTerm } },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        const response = await this.post(options);\r\n        const { data: { body: { hits: { hits } } } } = response;\r\n        const result = hits.map(result => result._source);\r\n        return result;\r\n    }\r\n};\r\n","import { Service } from './Service';\r\n\r\nexport class MessageService extends Service {\r\n    static async getConversation (convoWith, page, limit, token) {\r\n        const response = await this.get({ url: `api/conversation?with=${convoWith}&page=${page}&limit=${limit}`, token });\r\n        return response && response.data;\r\n    }\r\n    static sendMessage (data, token) {\r\n        return this.post({ url: 'api/message', data, token });\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport { AuthenticationService } from '../../services';\r\n\r\n@inject('authentication')\r\n@observer\r\nclass Authentication extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            formSubmitted: false,\r\n            showNotify: false,\r\n            message: '',\r\n        };\r\n    }\r\n    showNotification (message, callback) {\r\n        this.setState({\r\n            showNotify: true,\r\n            formSubmitted: false,\r\n            message,\r\n        }, () => {\r\n            const notificationTimeout = setTimeout(() => {\r\n                this.setState({\r\n                    showNotify: false,\r\n                    message: '',\r\n                });\r\n            }, 3000);\r\n            if (typeof callback === 'function') {\r\n                clearTimeout(notificationTimeout);\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n    storeAuthentication (response) {\r\n        const { data } = response;\r\n        const { authentication } = this.props;\r\n        authentication.storeAuthentication(data);\r\n    }\r\n    async authenticate (form) {\r\n        if (this.props.register) {\r\n            const response = await AuthenticationService.register(form);\r\n            this.storeAuthentication(response);\r\n            this.showNotification('Registration successful!', () => {\r\n                setTimeout(() => {\r\n                    this.props.history.push('/home');\r\n                }, 1000);\r\n            });\r\n        } else {\r\n            const response = await AuthenticationService.login(form);\r\n            this.storeAuthentication(response);\r\n            this.showNotification('Login successful!', () => {\r\n                setTimeout(() => {\r\n                    this.props.history.push('/home');\r\n                }, 700);\r\n            });\r\n        }\r\n    }\r\n    onSubmit (event) {\r\n        if (this.state.formSubmitted === true) return;\r\n        event.preventDefault();\r\n        const { target: form } = event;\r\n        this.setState({\r\n            formSubmitted: true,\r\n        }, async () => {\r\n            try {\r\n                await this.authenticate(form);\r\n            } catch (err) {\r\n                this.showNotification(err.message);\r\n            }\r\n        });\r\n    }\r\n    render () {\r\n        return (\r\n            this.props.register\r\n                ? <Register\r\n                    message = {this.state.message}\r\n                    showNotify = {this.state.showNotify}\r\n                    formSubmitted = {this.state.formSubmitted}\r\n                    onSubmit = {this.onSubmit.bind(this)}\r\n                />\r\n                : <Login\r\n                    message = {this.state.message}\r\n                    showNotify = {this.state.showNotify}\r\n                    formSubmitted = {this.state.formSubmitted}\r\n                    onSubmit = {this.onSubmit.bind(this)}\r\n                />\r\n        );\r\n    }\r\n};\r\n\r\nexport default withRouter(Authentication);\r\n","import Avatar from './Avatar';\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const size = props.size === 'medium' ? 'medium' : 'small';\r\n    return (\r\n        <div className = {`avatar-container avatar-${size}`}>\r\n            {props.firstLetter}\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport Utils from '../../utils';\r\nimport { Loader, Input, Dropdown } from 'semantic-ui-react';\r\nimport Avatar from '../Avatar';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const {\r\n        translation,\r\n        user,\r\n        recipient,\r\n        selectedUsers,\r\n        messages,\r\n        onLogout,\r\n        onSendMessage,\r\n    } = props;\r\n    return (\r\n        <Container className = 'home-container'>\r\n            <Row className = 'profile-tab user-profile-tab'>\r\n                <Col className = 'profile-avatar'>\r\n                    <Avatar firstLetter = {user.firstName[0].toUpperCase()}/>\r\n                </Col>\r\n                <Dropdown\r\n                    labeled\r\n                    button\r\n                    icon = 'setting'\r\n                >\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item\r\n                            onClick = {onLogout}\r\n                            text = {translation.getTranslation('logout')}\r\n                        />\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Row>\r\n            <Row className = 'row-container'>\r\n\r\n                <Col className = 'scrollable user-container' xs = {3}>\r\n                    <Row className = 'user-search'>\r\n                        <Col>\r\n                            <Dropdown\r\n                                onSearchChange = {props.onUserSearch}\r\n                                onChange = {props.onUserDropdownOptionSelect}\r\n                                placeholder = {translation.getTranslation('searchPlaceholder')}\r\n                                fluid\r\n                                search\r\n                                selection\r\n                                value = {''}\r\n                                options = {props.userDropdownOptions}\r\n                                loading = {props.userSearchLoading}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    {selectedUsers}\r\n                </Col>\r\n                <Col className = 'message-container' xs = {9}>\r\n                    {\r\n                        recipient &&\r\n                            <Row className = 'profile-tab chat-profile-tab'>\r\n                                <Col>\r\n                                    <Avatar firstLetter = {recipient.firstName[0].toUpperCase()}/>\r\n                                </Col>\r\n                            </Row>\r\n                    }\r\n                    {\r\n                        recipient &&\r\n                            <Row onScroll = {props.onMessageScroll} className = 'scrollable messages'>\r\n                                <Col>\r\n                                    <Loader className = 'message-loader' active = {props.loaderActive}/>\r\n                                    {messages}\r\n                                </Col>\r\n                            </Row>\r\n                    }\r\n                    {\r\n                        recipient &&\r\n                            <Row className = 'send-message'>\r\n                                <Col>\r\n                                    <Input\r\n                                        onKeyDown = {onSendMessage}\r\n                                        className = 'message-input'\r\n                                        size = 'mini'\r\n                                        placeholder = {translation.getTranslation('typeMessagePlaceholder')}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","import UserCard from './UserCard';\r\n\r\nexport default UserCard;\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Avatar from '../Avatar';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    let { user } = props;\r\n    let name = `${user.firstName} ${user.lastName}`;\r\n    const maxCharLength = 15;\r\n    if (name.length > maxCharLength) {\r\n        name = `${name.substring(0, maxCharLength)}...`;\r\n    }\r\n    return (\r\n        <Row style = {{ backgroundColor: props.selected ? '#f7f7f7' : 'white' }} className = 'user-card-container'>\r\n            <Col>\r\n                <div onClick = {() => props.onClick(user.email)} className = 'user-card'>\r\n                    <Avatar firstLetter = {name[0].toUpperCase()} size = 'medium'/>\r\n                    <div className = 'user-card-text-group'>\r\n                        <h1> {name} </h1>\r\n                    </div>\r\n                    <div className = 'user-card-options'>\r\n                        {props.unseenMessages > 0 &&\r\n                            <div className = 'count-bubble'>\r\n                                {props.unseenMessages}\r\n                            </div>\r\n                        }\r\n                        <img onClick = {(event) => {\r\n                            // It's important to prevent this inner div event from bubbling up to the\r\n                            // onClick handler attached to the outer div.\r\n                            event.stopPropagation();\r\n                            props.onCloseUserCard(user.email);\r\n                        }} className = 'close-user-card' src = {require('../../assets/cancel.jpg')}/>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n","import MessageCard from './MessageCard';\r\n\r\nexport default MessageCard;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport './styles.scss';\r\n\r\nexport default class MessageCard extends Component {\r\n    render () {\r\n        return (\r\n            <Row>\r\n                <div ref = {this.props.messageRef} className = {this.props.left ? 'message-card-container-left' : 'message-card-container-right'} xs = {1}>\r\n                    <Col className = {`message-card ${this.props.left ? 'message-card-left' : 'message-card-right'}`}>\r\n                        {\r\n                            this.props.username &&\r\n                                <h6 className = 'message-user'> {this.props.username} </h6>\r\n                        }\r\n                        <p>\r\n                            {this.props.message}\r\n                            <small>{this.props.timestamp}</small>\r\n                        </p>\r\n                    </Col>\r\n                </div>\r\n            </Row>\r\n        );\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Home from './Home';\r\nimport UserCard from '../UserCard';\r\nimport MessageCard from '../MessageCard';\r\nimport moment from 'moment';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { MessageService, AuthenticationService, UserSearchService } from '../../services';\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n@inject('authentication')\r\n@observer\r\nclass HomeContainer extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.currentPage = 0;\r\n        this.unseenMessagesMap = {};\r\n        this.state = {\r\n            messages: [],\r\n            userDropdownOptions: {},\r\n            selectedUsers: {},\r\n            userSearchLoading: false,\r\n            recipient: null,\r\n            loaderActive: false,\r\n        };\r\n        this.attachSocketIOHandler();\r\n    }\r\n    attachSocketIOHandler () {\r\n        const { location: { protocol, hostname, port } } = window;\r\n        const host = `${protocol}//${hostname}:${parseInt(port, 10) + 1}`;\r\n        this.socket = socketIOClient(process.env.REACT_APP_SOCKET_ENDPOINT || host);\r\n        this.socket.on(this.props.authentication.token, messageResponse => {\r\n            if (\r\n                // Safety check\r\n                this.state.recipient &&\r\n                (\r\n                    // If message.to is directed to the recipient who is one of the user that was searched and a tab exists for.\r\n                    this.state.recipient.email === messageResponse.to ||\r\n                    // Or if the message is from the recipient for which a tab exists on the left and is sent to the current user.\r\n                    (\r\n                        this.state.recipient.email === messageResponse.from &&\r\n                        messageResponse.to === this.props.authentication.email\r\n                    )\r\n                ) &&\r\n                // And we are not dealing with the scenario where the recipient is the current user (User is texting themselves)\r\n                // This is to prevent duplicate messages from showing up in the UI, as sent message also puts a card in the ui.\r\n                this.state.recipient.email !== this.props.authentication.email\r\n            ) {\r\n                const messages = [... this.state.messages];\r\n                messages.push(\r\n                    <MessageCard\r\n                        messageRef = {this.messageRef}\r\n                        key = {Math.random()}\r\n                        message = {messageResponse.message}\r\n                        timestamp = {moment(messageResponse.createdDate).format('hh:mm a')}\r\n                        right = {messageResponse.from === this.props.authentication.email}\r\n                        left = {messageResponse.from !== this.props.authentication.email}\r\n                    />,\r\n                );\r\n                this.setMessagesState(messages);\r\n            // If none of the other if statements are true, then we are in the scenario where the message sent via socket\r\n            // is not the recipient (selected user). In this case we show a bubble indicating that the user has an unread\r\n            // message from another user.\r\n            } else if (messageResponse.from !== this.props.authentication.email) {\r\n                if (messageResponse.from in this.unseenMessagesMap) {\r\n                    this.unseenMessagesMap[messageResponse.from] += 1;\r\n                } else {\r\n                    this.unseenMessagesMap[messageResponse.from] = 1;\r\n                }\r\n                this.forceUpdate();\r\n            }\r\n        });\r\n    }\r\n    async onLogout () {\r\n        const { authentication } = this.props;\r\n        try {\r\n            await AuthenticationService.logout(authentication.token);\r\n            authentication.refreshAuthentication();\r\n        } catch (err) {\r\n            if (err && err.response && err.response.status === 403) {\r\n                this.props.history.push('/login');\r\n            } else if (err) {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    onMessageScroll (event) {\r\n        const yCoordinate = event.target && event.target.scrollTop;\r\n        this.scrollHeight = event.target && event.target.scrollHeight;\r\n        // Once all messages has been reached no need to make a request to the server.\r\n        if (\r\n            this.currentPage > 0 &&\r\n            yCoordinate === 0 &&\r\n            this.state.recipient &&\r\n            !this.state.recipient.allMessagesRetrieved &&\r\n            this.state.messages &&\r\n            this.state.messages.length >= (process.env.REACT_APP_ITEMS_PER_PAGE || 15)\r\n        ) {\r\n            this.setState({ loaderActive: true }, async () => {\r\n                try {\r\n                    let messagesResponse = await MessageService.getConversation(\r\n                        this.state.recipient.email,\r\n                        ++this.currentPage,\r\n                        process.env.REACT_APP_ITEMS_PER_PAGE || 15,\r\n                        this.props.authentication.token\r\n                    );\r\n                    this.unseenMessagesMap[this.state.recipient.email] = messagesResponse.unseenItems;\r\n                    messagesResponse = messagesResponse.items;\r\n                    if (messagesResponse && messagesResponse.length === 0) {\r\n                        return this.setState({\r\n                            loaderActive: false,\r\n                            recipient: { ... this.state.recipient, allMessagesRetrieved: true },\r\n                        });\r\n                    }\r\n                    this.setState({ loaderActive: false }, () => {\r\n                        const stateMessages = [... this.state.messages];\r\n                        const messages = [];\r\n                        for (let i = messagesResponse.length - 1; i >= 0; --i) {\r\n                            const messageResponse = messagesResponse[i];\r\n                            this.messageRef = React.createRef();\r\n                            messages.push(\r\n                                <MessageCard\r\n                                    messageRef = {this.messageRef}\r\n                                    key = {Math.random()}\r\n                                    message = {messageResponse.message}\r\n                                    timestamp = {moment(messageResponse.createdDate).format('hh:mm a')}\r\n                                    right = {messageResponse.from === this.props.authentication.email}\r\n                                    left = {messageResponse.from !== this.props.authentication.email}\r\n                                />,\r\n                            );\r\n                        }\r\n                        if (this.state.recipient && !this.state.recipient.allMessagesRetrieved) {\r\n                            this.setState({ messages: messages.concat(stateMessages) }, () => {\r\n                                this.messageRef.current.scrollIntoView();\r\n                            });\r\n                        }\r\n                    });\r\n                } catch (err) {\r\n                    this.setState({ loaderActive: false }, () => {\r\n                        if (err && err.response && err.response.status === 403) {\r\n                            this.props.history.push('/login');\r\n                        } else if (err) {\r\n                            throw err;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onUserSearch (event) {\r\n        const { currentTarget: { value } } = event;\r\n        if (value) {\r\n            this.setState({ userSearchLoading: true }, async () => {\r\n                const { authentication } = this.props;\r\n                try {\r\n                    const results = await UserSearchService.search(value, authentication.token);\r\n                    const userDropdownOptions = {};\r\n                    results.forEach(result => {\r\n                        const { email } = result;\r\n                        userDropdownOptions[email] = result;\r\n                    });\r\n                    this.setState({\r\n                        userSearchLoading: false,\r\n                        userDropdownOptions,\r\n                    });\r\n                } catch (err) {\r\n                    this.setState({ userSearchLoading: false }, () => {\r\n                        if (err && err.response && err.response.status === 403) {\r\n                            this.props.history.push('/login');\r\n                        } else if (err) {\r\n                            throw err;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async onUserDropdownOptionSelect (event, { value: email }) {\r\n        const { key } = event;\r\n        if (key !== 'ArrowDown' && key !== 'ArrowUp') {\r\n            const user = this.state.userDropdownOptions[email];\r\n            const selectedUsers = { ... this.state.selectedUsers };\r\n            let states = { recipient: user, userDropdownOptions: {} };\r\n            if (!(user.email in this.state.selectedUsers)) {\r\n                selectedUsers[email] = user;\r\n                states.selectedUsers = selectedUsers;\r\n            }\r\n            this.setMessages(email, states);\r\n        }\r\n    }\r\n    async onUserClick (email) {\r\n        this.setState({ recipient: this.state.selectedUsers[email] });\r\n        this.setMessages(email);\r\n    }\r\n    setMessagesState (messages, otherOptions) {\r\n        this.setState({ messages, ... otherOptions }, () => {\r\n            // Scroll into view will use the scroll bar of the nearest parent which is scrollable.\r\n            this.messageRef && this.messageRef.current && this.messageRef.current.scrollIntoView();\r\n        });\r\n    }\r\n    setMessages (email, otherOptions) {\r\n        this.setState({ loaderActive: true }, async () => {\r\n            try {\r\n                let messagesResponse = await MessageService.getConversation(\r\n                    email,\r\n                    1,\r\n                    process.env.REACT_APP_ITEMS_PER_PAGE || 15,\r\n                    this.props.authentication.token\r\n                );\r\n                this.unseenMessagesMap[email] = messagesResponse.unseenItems;\r\n                messagesResponse = messagesResponse.items;\r\n                this.setState({ loaderActive: false }, () => {\r\n                    this.currentPage = 1;\r\n                    const messages = [];\r\n                    for (let i = messagesResponse.length - 1; i >= 0; --i) {\r\n                        const messageResponse = messagesResponse[i];\r\n                        this.messageRef = React.createRef();\r\n                        messages.push(\r\n                            <MessageCard\r\n                                messageRef = {this.messageRef}\r\n                                key = {Math.random()}\r\n                                message = {messageResponse.message}\r\n                                timestamp = {moment(messageResponse.createdDate).format('hh:mm a')}\r\n                                right = {messageResponse.from === this.props.authentication.email}\r\n                                left = {messageResponse.from !== this.props.authentication.email}\r\n                            />,\r\n                        );\r\n                    }\r\n                    this.setMessagesState(messages, otherOptions);\r\n                });\r\n            } catch (err) {\r\n                this.setState({ loaderActive: true }, () => {\r\n                    if (err && err.response && err.response.status === 403) {\r\n                        this.props.history.push('/login');\r\n                    } else if (err) {\r\n                        throw err;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    async sendMessage (event) {\r\n        const { currentTarget: { value } } = event;\r\n        event.currentTarget.value = '';\r\n        if (!value) return;\r\n        try {\r\n            const res = await MessageService.sendMessage({\r\n                to: this.state.recipient.email,\r\n                message: value,\r\n            }, this.props.authentication.token);\r\n            if (res.status >= 200) {\r\n                this.messageRef = React.createRef();\r\n                const messages = [... this.state.messages];\r\n                messages.push(\r\n                    <MessageCard\r\n                        messageRef = {this.messageRef}\r\n                        key = {Math.random()}\r\n                        message = {value}\r\n                        timestamp = {moment().format('hh:mm a')}\r\n                        right\r\n                    />,\r\n                );\r\n                this.setMessagesState(messages);\r\n            }\r\n        } catch (err) {\r\n            if (err && err.response && err.response.status === 403) {\r\n                this.props.history.push('/login');\r\n            } else if (err) {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    onSendMessage (event) {\r\n        if (event.key === 'Enter') {\r\n            this.sendMessage(event);\r\n        }\r\n    }\r\n    onCloseUserCard (email) {\r\n        const selectedUsers = { ... this.state.selectedUsers };\r\n        delete selectedUsers[email];\r\n        let recipient = this.state.recipient;\r\n        if (\r\n            recipient &&\r\n            typeof recipient === 'object' &&\r\n            recipient.email === email\r\n        ) {\r\n            recipient = null;\r\n            this.currentPage = 0;\r\n        }\r\n        this.setState({\r\n            selectedUsers,\r\n            recipient,\r\n        });\r\n    }\r\n    render () {\r\n        const { authentication: { id, email, firstName, lastName } } = this.props;\r\n        return (\r\n            <Home\r\n                user = {{ id, email, firstName, lastName }}\r\n                recipient = {this.state.recipient}\r\n                selectedUsers = {Object.keys(this.state.selectedUsers).map(key => {\r\n                    const user = this.state.selectedUsers[key];\r\n                    const unseenMessages = this.unseenMessagesMap[user.email];\r\n                    return (\r\n                        <UserCard\r\n                            onClick = {this.onUserClick.bind(this)}\r\n                            key = {user.id}\r\n                            user = {user}\r\n                            selected = {user.email === (this.state.recipient && this.state.recipient.email)}\r\n                            onCloseUserCard = {this.onCloseUserCard.bind(this)}\r\n                            unseenMessages = {unseenMessages}\r\n                        />\r\n                    );\r\n                })}\r\n                userDropdownOptions = {Object.keys(this.state.userDropdownOptions).map(key => {\r\n                    const result = this.state.userDropdownOptions[key];\r\n                    const { id, email, firstName, lastName } = result;\r\n                    return {\r\n                        key: id,\r\n                        value: email,\r\n                        text: `${firstName} ${lastName}`,\r\n                    };\r\n                })}\r\n                userSearchLoading = {this.state.userSearchLoading}\r\n                messages = {this.state.messages}\r\n                onSendMessage = {this.onSendMessage.bind(this)}\r\n                onLogout = {this.onLogout.bind(this)}\r\n                onUserSearch = {this.onUserSearch.bind(this)}\r\n                onUserDropdownOptionSelect = {this.onUserDropdownOptionSelect.bind(this)}\r\n                onMessageScroll = {this.onMessageScroll.bind(this)}\r\n                loaderActive = {this.state.loaderActive}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(HomeContainer);\r\n","import React from 'react';\r\nimport { Redirect, Switch, Route } from 'react-router-dom';\r\nimport Authentication from './components/Authentication';\r\nimport Home from './components/Home';\r\nimport Utils from './utils';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const { authentication } = props;\r\n    return (\r\n        <Switch>\r\n            <Route path = \"/login\">\r\n                <Authentication />\r\n            </Route>\r\n            <Route path = \"/register\">\r\n                <Authentication register />\r\n            </Route>\r\n            <Route path = \"/home\">\r\n                {\r\n                    authentication.token\r\n                        ? <Home />\r\n                        : <Redirect to = '/login'/>\r\n                }\r\n            </Route>\r\n            <Route path = \"/\">\r\n                {\r\n                    authentication.nonObservableToken\r\n                        ? <Redirect to = '/home'/>\r\n\r\n                        : <Redirect to = 'login'/>\r\n                }\r\n            </Route>\r\n        </Switch>\r\n    );\r\n});\r\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW (swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log('Content is cached for offline use.');\n\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n    fetch(swUrl)\n        .then(response => {\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister () {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { Provider } from 'mobx-react';\r\nimport { MessageStore, TranslationStore, AuthenticationStore } from './store';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Routes from './Routes';\r\n\r\nexport default () => {\r\n    return (\r\n        <Router>\r\n            <Provider\r\n                message = { new MessageStore() }\r\n                authentication = { new AuthenticationStore() }\r\n                translation = { new TranslationStore() }\r\n            >\r\n                <Routes />\r\n            </Provider>\r\n        </Router>\r\n    );\r\n};\r\n"],"sourceRoot":""}